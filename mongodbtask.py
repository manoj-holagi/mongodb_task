# -*- coding: utf-8 -*-
"""mongodbtask.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MM9xDjHIPBKtxMqTMtVw9SsIzJ-LTLMU
"""

import pandas as pd

import pymongo
from pymongo import MongoClient
uri = 'mongodb://manojmh007:manojmh007@cluster0-shard-00-00.sa6wc.mongodb.net:27017,cluster0-shard-00-01.sa6wc.mongodb.net:27017,cluster0-shard-00-02.sa6wc.mongodb.net:27017/myFirstDatabase?ssl=true&replicaSet=atlas-yl407q-shard-0&authSource=admin&retryWrites=true'
client = MongoClient(uri)

import pymongo
client = pymongo.MongoClient("mongodb://manojmh007:manojmh007@cluster0-shard-00-00.sa6wc.mongodb.net:27017,cluster0-shard-00-01.sa6wc.mongodb.net:27017,cluster0-shard-00-02.sa6wc.mongodb.net:27017/myFirstDatabase?ssl=true&replicaSet=atlas-yl407q-shard-0&authSource=admin&retryWrites=true")
db = client.student
std = db.student
#1)Find the student name who scored maximum scores in all (exam, quiz and homework)?
def max_scorer(std):
  x = std.aggregate([{'$unwind':'$scores'},{'$group':{"_id":"$_id","name":{"$first":"$name"},"max_score":{'$sum':"$scores.score"}}}])
  max=0
  id=0
  for i in x:
    if i['max_score']>max:
      max=i['max_score']
      id=i['_id']
      name=i['name']
    else:
      pass
  print(name," is the max scorer with a total : ",max)
    

max_scorer(manoj)

#2)Find students who scored below average in the exam and pass mark is 40%?

x2=std.find({ "scores.type": 'exam'})

for i in x2:
  l=[i["scores"]]
  name=i['name']
  for j in l:
    k=j[0]
    if k['score']>=40 and k['score']<=55:
      print(name,k['score'],k['type'])

#3)Find students who scored below pass mark and assigned them as fail, and above pass mark as pass in all the categories.
def aggr(std):
 prcntg = std.aggregate([{'$unwind':'$scores'},
                          {'$group':{"_id":"$_id","name":{"$first":"$name"},"max_score":{'$sum':"$scores.score"}}},
                          {'$addFields':{"prctg":{'$divide':["$max_score",3]}}},
                           {'$addFields':{"status":{"$cond":{'if' :{"$gte":["$prctg",40]},'then':"Pass",'else':"Fail"}}}}])
 return prcntg

prcntg=aggr(std)
for i in prcntg:
 if i['prctg']>=40 and i['prctg']<=55:
     print(i)

prcntg=aggr(std)
for i in prcntg:
  print(i)

#4)Find the total and average of the exam, quiz and homework and store them in a separate collection.
db.create_collection('total_average')
x2 = std.aggregate([{'$unwind':'$scores'},{'$group':{'_id':{'type':"$scores.type"},"total:":{'$sum':"$scores.score"},"average:":{'$avg':"$scores.score"}}}])
t_a=db.total_average
for i in x2:
  print(i)
  t_a.insert_one(i)

#5)Create a new collection which consists of students who scored below average and above 40% in all the categories.
prcntg=aggr(std)
db.create_collection('passed_below_average')     #collection is created once hence commented
p_a=db.passed_below_average
for i in prcntg:
  if i['prctg']>40 and i['prctg']<=55:
      print(i)
      p_a.insert_one(i)

#6)Create a new collection which consists of students who scored below the fail mark in all the categories.
prcntg=aggr(std)
db.create_collection('failed')    #collection is created once hence commented
fail=db.failed
for i in prcntg:
  if i['status']=='Fail':
      print(i)
      fail.insert_one(i)

#7)Create a new collection which consists of students who scored above pass mark in all the categories.prcntg=aggr(sanjay)
prcntg=aggr(std)
db.create_collection('passed')        #collection is created once hence commented
p=db.passed
for i in prcntg:
  if i['prctg']>=40:
      print(i)
      p.insert_one(i)